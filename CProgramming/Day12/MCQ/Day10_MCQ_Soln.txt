// #include<stdio.h>
// int main(void)
// {
// static int num;
// printf("%d",num=num+2);
// if(num!=10-2)
// main();
// return 0;
// }
// /*
// int main(void)
// {
// static int num;
// printf("%d",num=num+2); // 0 + 2 => 2 ( num updated to 2 )
// if(num!=10-2) // if(2!=8)
// main(); // recursive call
// return 0;
// }
// // num is static so num variable will be destroyed after execution of main( )

// int main(void)
// {
// static int num;
// printf("%d",num=num+2); // 2 + 2 => 4 ( num updated to 4 )
// if(num!=10-2) // if(4!=8)
// main(); // recursive call
// return 0;
// }

// int main(void)
// {
// static int num;
// printf("%d",num=num+2); // 4 + 2 => 6 ( num updated to 6 )
// if(num!=10-2) // if(6!=8)
// main(); // recursive call
// return 0;
// }

// int main(void)
// {
// static int num;
// printf("%d",num=num+2); // 6 + 2 => 8 ( num updated to 8 )
// if(num!=10-2) // if(8!=8)  //false
// main();
// return 0;
// }
// //contrrol goes back to calling function destroying each stack frame
// */

// #include <stdio.h>
// int f(int n) // n = 1
// {

//   static int i = 1;
//   if (n >= 5)
//     return n;
//   n = n + i;
//   i++;
//   printf("%d %d\n",n,i);
//   return f(n);
// }
// int main(void)
// {
//   int y = f(1);
//   printf("\n inside main : %d", y);
//   return 0;
// }

*******************************************************************
// /*
// #include <stdio.h>
// int f(int n) // n = 1
// {
//   //static variable will get memory once before main
//   static int i = 1; //i scope is limited to f() function
//   if (n >= 5) // if(1 >= 5) => false
//     return n;
//   n = n + i; // n = 1 + 1 => 2 (n is updated to 2 )
//   i++; // 2
//   return f(n); // recursive call is given will value 2
// }

// // i is updated to 2 now
// int f(int n) // n = 2
// {
//   static int i = 1;
//   if (n >= 5) // if(2 >= 5) => false
//     return n;
//   n = n + i; // n = 2 + 2 => 4 (n is updated to 4 )
//   i++; // 3
//   return f(n); // recursive call is given will value 4
// }

// // i is updated to 3 now
// int f(int n) // n = 4
// {
//   static int i = 1;
//   if (n >= 5) // if(4 >= 5) => false
//     return n;
//   n = n + i; // n = 4 + 3 => 7 (n is updated to 7 )
//   i++; // 4
//   return f(n); // recursive call is given will value 7
// }

// // i is updated to 4 now
// int f(int n) // n = 7
// {
//   static int i = 1;
//   if (n >= 5) // if(7 >= 5) => True
//     return n; // n is returned i.e 7 to the calling function
//   //skipped
//   n = n + i;
//   i++;
//   return f(n);
// }

// int main(void)
// {
//   int y = f(1); // 1 is passed
//   printf("%d", y);
//   return 0;
// }

//*************************************************************************

// */

#include <stdio.h>
// void fun(int);
// int main(void)
// {
//   static int i = 0;
//   fun(++i);
//   return 0;
// }
// void fun(int i)
// {
//   static int j = 1;
//   i = j;
//   j++;
//   i++;
//   printf("%d,%d\n", i);
//   if (i <= 5)
//     fun(i);
// }
// /*
// #include <stdio.h>
// void fun(int);
// int main(void)
// {
//   static int i = 0;//static variable will get memory only once 
//   fun(++i); // ++i => 0 is pre-incremented and passed to fun( )
//   return 0;
// }
// //  i = 1 
// void fun(int i)
// {
//   static int j = 1; // static variable will get memory only once 
//   i = j; // j is copied into i => 1 is copied to i ( i = 1 )
//   j++; // j++ => 1 is incremented to 2 
//   i++; // i++ => 1 is incremented to 2 
//   printf("%d,", i); // i is printed to 2 
//   if (i <= 5) // if(2<=5) => if(T)
//     fun(i);//recursive call is given 
// }

// //  i = 2 ( i is 2 now ) 
// void fun(int i)
// {
//   static int j = 1;
//   i = j; // j is copied into i => 2 is copied to i ( i = 2 )
//   j++; // j++ => 2 is incremented to 3 
//   i++; // i++ => 2 is incremented to 3 
//   printf("%d,", i); // i is printed to 3 
//   if (i <= 5) // if(3<=5) => if(T)
//     fun(i);//recursive call is given 
// }

// //  i = 3 ( i is 3 now ) 
// void fun(int i)
// {
//   static int j = 1;
//   i = j; // j is copied into i => 3 is copied to i ( i = 3 )
//   j++; // j++ => 3 is incremented to 4 
//   i++; // i++ => 3 is incremented to 4 
//   printf("%d,", i); // i is printed to 4 
//   if (i <= 5) // if(4<=5) => if(T)
//     fun(i);//recursive call is given 
// }

// //  i = 4 ( i is 4 now ) 
// void fun(int i)
// {
//   static int j = 1;
//   i = j; // j is copied into i => 4 is copied to i ( i = 4 )
//   j++; // j++ => 4 is incremented to 5 
//   i++; // i++ => 4 is incremented to 5 
//   printf("%d,", i); // i is printed to 5 
//   if (i <= 5) // if(5<=5) => if(T)
//     fun(i);//recursive call is given 
// }

// //  i = 5 ( i is 5 now ) 
// void fun(int i)
// {
//   static int j = 1;
//   i = j; // j is copied into i => 5 is copied to i ( i = 5 )
//   j++; // j++ => 5 is incremented to 6 
//   i++; // i++ => 5 is incremented to 6
//   printf("%d,", i); // i is printed to 6 
//   if (i <= 5) // if(6<=5) => if(F)
//     fun(i);// skipped
// }
// //control goes back to the calling function destroying each activation record 
// */