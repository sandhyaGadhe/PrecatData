// #include <stdio.h>
// #include <stdlib.h>
// #include <string.h>

// struct course
// {
//     char *name;
// };

// struct course *fun(void)
// {
//     struct course *s;

//     s->name = (char *)malloc(strlen("DITISS") + 1); // +1 for the null terminator
//     if (s->name != NULL)
//     {
//         strcpy(s->name, "DITISS");
//     }
//     return s;
// }

// int main(void)
// {
//     struct course *c1 = fun();
//     printf("%s", c1->name);

//     // Don't forget to free the allocated memory
//     free(c1->name);
//     free(c1);

//     return 0;
// }

//******************************************************************

// // #include <stdio.h>
// // #include <string.h>
// // int main(void)
// // {
// //     struct Cell
// //     {
// //         int isParent;
// //         char *child;
// //     };
// //     struct Cell c1 = {23, "Remote"};
// //     struct Cell c2 = c1;
// //     c2.isParent = 24;
// //     //strcpy(c2.child, "center"); // NOT OK
// //     printf("\n %d %s", c2.isParent, c2.child);
// //     return 0;
// // }
// #include <stdio.h>
// #include <string.h>
// #include <stdlib.h>

// int main(void)
// {
//     struct Cell
//     {
//         int isParent;
//         char *child;
//     };

//     struct Cell c1 = {23, "Remote"};
//     struct Cell c2 = c1;
//     c2.isParent = 24;

//     // Allocate memory for c2.child and copy the string
//     c2.child = (char *)malloc(strlen("center") + 1); // +1 for the null terminator
//     strcpy(c2.child, "center");
//     printf("\n %d %s", c2.isParent, c2.child);
//     //free the allocated memory
//     free(c2.child);

//     return 0;
// }

//********************************************************************

#include <stdio.h>
#include <string.h>
struct city
{
    char name[20];
} cty;
char *fun(struct city *tempCty)
{
    strcpy(tempCty->name, "Pune");
    return tempCty->name;
}
int main()
{
    strcpy(cty.name, "Karad ");
    printf("%s %s", cty.name, fun(&cty));
    return 0;
}
