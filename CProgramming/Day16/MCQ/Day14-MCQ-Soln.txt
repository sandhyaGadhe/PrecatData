// #include <stdio.h>
// #define COL 3
// #define ROW 2
// int main(void)
// {
//     int arr[2][3] = {11, 22, 33, 44};
//     /*
//           arr
//                       [0]   [1]   [2]
//             [0]        11    22   33
//                       100   104   108

//             [1]        44    0     0
//                       112   116   120

//     */

//     int *ptr[] = {(int *)arr + 2, (int *)arr + 1, (int *)arr};
//     //                  108     ,   104    ,        100

//     printf("%d %d %d %d\n", ptr[0][1], *(*(ptr + 1) + 0),
//            *(ptr + 0)[2], *(ptr[1] + 1));
//     /*
//             ptr[0][1]

//             *(ptr + 0) => 108
//             *(ptr + 0) + 1 => 108 + 1 * 4 => 108 + 4 => 112
//             *(*(ptr + 0) + 1) => *112 => 44

//             *(*(ptr + 1) + 0

//              ptr[1] => 104
//              *(ptr + 1) => 104
//              *(ptr + 1 ) + 0 => 104
//             *(*(ptr + 1 ) + 0  ) => *104 => 22

//             *(ptr + 0)[2]
//             *(ptr + 0) =>108
//             *(ptr + 0) + 2 => 100
//             *(*(ptr + 0) + 2) => *100 => 11

//             *(ptr[1] + 1)
//             *(104 + 1 )
//             *(104 + 1 * 4 )
//             *(104 + 4)
//             *(108)
//              33

//     */
//     return 0;
// }

// #include<stdio.h>
// int main(void)
// {
// char arr[5][7] = {"DAC", "DITISS","DMC", "DESD", "DBDA"};
// char(*ptr)[7] = arr;
// // Refer the daigram before solving
// //printf("%c ", *( arr[1] + 3));
// /*
//             *( arr[1] + 3)
//             *(407 + 3)
//             *(407 + 3 * 1)
//             *(407 + 3)
//             *(410)
//              I
// */
// //printf("%c ",  ptr[1][1]);
// /*
//         ptr[1][1]
//        ptr + 1 => outer address => 407
//        *(ptr + 1 )=> inner address => 407
//        *(ptr + 1) + 1 => 408
//        *(*(ptr + 1 ) + 1) => *408 => I ( pointer notation )
//        ptr[1][1] => I ( array notation )

// */
// //printf("%c\n", *( arr[1] + 1));
// /*
//         *( arr[1] + 1)
//         *(407 + 1 )
//         *(407 + 1 * 1)
//         *(407 + 1)
//         *(408)
//           I
// */
// //printf("%c\n", ptr[1][3]);
// /*
//         ptr[1][3]
//         ptr + 1 => outer address => 407
//        *(ptr + 1 )=> inner address => 407
//        *(ptr + 1 ) + 3 => 407 + 3 => 407 + 3 * 1 => 410
//         *(*(ptr + 1 ) + 3 ) => *(410) => I ( pointer notation )
//         ptr[1][1] => I (array notation )
// */
// printf("%d",ptr[0][6]);

// return 0;
// }

// #include <stdio.h>
// void fun(int **p);
// int main(void)
// {
//     int a[3][3] = {{1}, {4, 5}, {7, 8, 9}};
//     /*
//                 [0]   [1]   [2]

//         [0]      1     0     0
//                100    104   108

//         [1]     4     5     0
//                112    116   120

//         [2]     7     8     9
//                124    128   132

//     */
//     int *ptr_a = &a[1][0];
//     printf(" %d ", *ptr_a); // prints 4
//     fun(&ptr_a);  //first call
//     /*
//                 [0]   [1]   [2]

//         [0]      1     0     0
//                100    104   108

//         [1]     5     5     0
//                112    116   120

//         [2]     7     8     9
//                124    128   132

//     */

//     printf(" %d ", a[1][0]); // prints 5

//     ptr_a = &a[2][1];
//     printf(" %d ", *ptr_a); // 8 is printed

//     fun(&ptr_a); // second call

//     /*
//                 [0]   [1]   [2]

//         [0]      1     0     0
//                100    104   108

//         [1]     5     5     0
//                112    116   120

//         [2]     7     9     9
//                124    128   132

//     */

//     printf(" %d \n", **a); //1

//     return 0;
// }
// void fun(int **p)
// {
//     **p = **p + 1;
//     printf(" %d ", **p);
//     return;
// }
// /*
// // in first call
// void fun(int **p) // **p => 4
// {
//     **p = **p + 1; // 4 is changed to 5
//     printf(" %d ", **p); // 5 is printed
//     // value from 2D array is changed from 4 to 5
//     return;
// }

// ***********************
// second call
// void fun(int **p) // **p => 8
// {
//     **p = **p + 1; // 8 is changed to 9
//     printf(" %d ", **p); // 9 is printed
//     // value from 2D array is changed from 8 to 9 => ( arr[2][1] )
//     return;
// }

// */

// ***********************************************************

// #include <stdio.h>
// void funcion_print(const char s[][10])
// {
//     char *p = (char *)s[0]; // "PG-DITISS"
//     printf("%c-%s", *(p + 3) + *(p + 1) - p[1], (p + 3) + *(p + 1) - p[1]);

//     /*
//             *(p + 3) + *(p + 1) - p[1]
//             *(p + 3) + *(p + 1) - *(p + 1 )
//             *(p + 3) => D
//             p[3] => D

//             (p + 3) + *(p + 1) - p[1]
//             (p + 3) + *(p + 1) - *(p + 1 )
//             (p + 3) => address of D=> %s => DITISS

//             prints D DITISS

//     */
//     return;
// }
// int main(void)
// {
//     char str[6][10] = {"PG-DITISS", "PG-DBDA", "PG-DESD",
//                        "PG-DMC", "PG-DAC", "PreCat"};

//     funcion_print(str);
//     return 0;
// }

// ***************************************************************************************

// //.\a.exe PG-DAC PG-DMC is passed on command line
// #include <stdio.h>
// int main(int argc, char *argv[])
// {
//     // refer the daigram 
//     int i = 0;
//     while (*argv++)
//     {
//         printf("%s ", *argv++);
//         argv--;
//     }
//     return 0;
// }

/*

#include<stdio.h> 
//.\a.exe PG-DAC PG-DMC
int main(int argc, char *argv[])
{
int i=0;
while(*argv++)
{
printf("%s ",*argv++);
argv--;
}
return 0;
}
/*

int main(int argc, char *argv[])
{
int i=0;

//.\a.exe PG-DAC PG-DMC
while(*argv++) // in first call *argv=> 500 non zero true 
{
//argv++ post incremented to next location 300     
printf("%s ",*argv++);// *argv=> *300=> PG-DAC
// argv post-incremented to 400 

argv--; //argv is associated as 400 
// post-decrement i.e argv is pointing to 300  
}


while(*argv++) // in second call *argv=> 300 non zero true 
{
//argv++ post incremented to next location 400     
printf("%s ",*argv++);// *argv=> *400=> PG-DMC
// argv post-incremented to 0 (last block) 

argv--; //argv is associated as 0 
// post-decrement i.e argv is pointing to 400  
}

while(*argv++) // in third call *argv=> 400 non zero true 
{
//argv++ post incremented to next location of 0    
printf("%s ",*argv++);// *argv=> 0 => (null)
// argv post-incremented to next location (next to 0)(716)

argv--; //argv is associated next to 0 block i.e 716 
// post-decrement i.e argv decremented to 0 again (i.e 712)
}

while(*argv++) // in fourth call *argv=> 0
{
//skipped     
printf("%s ",*argv++);
argv--; 
}




*/
*/